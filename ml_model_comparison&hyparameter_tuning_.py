# -*- coding: utf-8 -*-
"""ML model comparison&Hyparameter tuning .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SoIU_s-QjsOsLuLkNrMRYognMYTdgrFb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv("/content/Grocery dataset.zip")
df.head()

df.isnull().sum()
df.dtypes

df['High_Sales'] = (df['Store_Sales'] > df['Store_Sales'].median()).astype(int)

X = df.drop(['Store_Sales', 'High_Sales'], axis=1)
y = df['High_Sales']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(),
    "SVC": SVC(),
    "KNN": KNeighborsClassifier()
}

results = []

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    results.append({
        "Model": name,
        "Accuracy": accuracy_score(y_test, y_pred),
        "Precision": precision_score(y_test, y_pred),
        "Recall": recall_score(y_test, y_pred),
        "F1 Score": f1_score(y_test, y_pred)
    })

pd.DataFrame(results)

#hyperparameter tuning
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5]
}

grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=5, scoring='f1')
grid.fit(X_train, y_train)

best_rf = grid.best_estimator_
y_pred_rf = best_rf.predict(X_test)
print("Best Random Forest:")
print(classification_report(y_test, y_pred_rf))

from scipy.stats import uniform

param_dist = {
    'C': uniform(0.1, 10),
    'gamma': ['scale', 'auto'],
    'kernel': ['rbf', 'linear']
}

rand_search = RandomizedSearchCV(SVC(), param_distributions=param_dist, n_iter=10, cv=5, scoring='f1')
rand_search.fit(X_train, y_train)

best_svc = rand_search.best_estimator_
y_pred_svc = best_svc.predict(X_test)
print("Best SVC:")
print(classification_report(y_test, y_pred_svc))

final_results = results.copy()

final_results.append({
    "Model": "Tuned Random Forest",
    "Accuracy": accuracy_score(y_test, y_pred_rf),
    "Precision": precision_score(y_test, y_pred_rf),
    "Recall": recall_score(y_test, y_pred_rf),
    "F1 Score": f1_score(y_test, y_pred_rf)
})

final_results.append({
    "Model": "Tuned SVC",
    "Accuracy": accuracy_score(y_test, y_pred_svc),
    "Precision": precision_score(y_test, y_pred_svc),
    "Recall": recall_score(y_test, y_pred_svc),
    "F1 Score": f1_score(y_test, y_pred_svc)
})

pd.DataFrame(final_results).sort_values(by="F1 Score", ascending=False)